.. Copyright 2013-2017 The Salish Sea MEOPAR contributors
.. and The University of British Columbia
..
.. Licensed under the Apache License, Version 2.0 (the "License");
.. you may not use this file except in compliance with the License.
.. You may obtain a copy of the License at
..
..    http://www.apache.org/licenses/LICENSE-2.0
..
.. Unless required by applicable law or agreed to in writing, software
.. distributed under the License is distributed on an "AS IS" BASIS,
.. WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
.. See the License for the specific language governing permissions and
.. limitations under the License.


.. _NEMO-3.6-NEMO-3.6-RunDescriptionFile:

*****************************
NEMO-3.6 Run Description File
*****************************

.. warning::
    Versions 2.1 and later of the :kbd:`SalishSeaCmd` package introduced changes in the run description file structure that are not backward compatible.
    Older run description files for NEMO-3.6 runs need to be updated before they can be successfully used with the :command:`salishsea run` command.
    Please see :ref:`SalishSeaCmdChangesThatBreakBackwardCompatibility` for details.


.. _NEMO-3.6-ExampleRunDescriptionYAML-File:

Example Run Description YAML File
=================================

Example (from :file:`SS-run-sets/SalishSea/nemo3.6/SalishSea.yaml`):

.. literalinclude:: SalishSea.yaml.example-NEMO-3.6
   :language: yaml


.. _NEMO-3.6-BasicRunConfiguration:

Basic Run Configuration
=======================

The following key-value pairs provide the basic configuration for the run:

:kbd:`config_name`
  The name of the NEMO configuration to use for runs.
  It is the name of a directory in :file:`NEMOGCM/CONFIG/` in the :kbd:`NEMO-3.6-code` code directory given by the :kbd:`NEMO` key in the :ref:`NEMO-3.6-Paths`.

:kbd:`MPI decomposition`
  Specify how the domain is to be distributed over the processors in the :kbd:`i` (longitude) and :kbd:`j` (latitude) directions;
  e.g. :kbd:`8x18`.
  Those values are used to set the :kbd:`namelist.compute nammpp` namelist :kbd:`jpni` and :kbd:`jpnj` values,
  to set the number of processors and nodes in the :file:`SalishSeaNEMO.sh` script that is generated by the :command:`salishsea run` command,
  and to tell the :program:`REBUILD_NEMO` tool how many files to process.

:kbd:`run_id`
   The job identifier that appears in the :command:`qstat` listing.

:kbd:`walltime`
  The wall-clock time requested for the run.
  It limits the time that the job will run for on all machines,
  and it also affects queue priority for runs on Westgrid machines.
  It is important to allow some buffer time when calculating your walltime limits to allow for indeterminacy of the NEMO run itself,
  as well as the time required to combine the per-processor results files into run results files at the end of the run.

:kbd:`email`
  The email address at which you want to receive notification of the beginning and end of execution of the run,
  as well as notification of abnormal abort messages.
  The email key is only required if the address is different than would be constructed by combining your user id on the machine that the job runs on with :kbd:`@eos.ubc.ca`.

An optional key,
:kbd:`Land processor elimination`,
is available to control whether or not NEMO-3.6 runs are configured to perform calculations over the entire domain,
or only on the MPI subdomains that contain water.
Please see :ref:`LandProcessorElimination` for a detailed explanation,
and use the :ref:`Preferred-MPI-LPE-Decompositions` table to guide your choice of value for :kbd:`MPI decomposition`.
The :ref:`SalishSeaCmdProcessor` takes care of setting the correct number of processors based on your chosen :kbd:`MPI decomposition`.
Land processor elimination is enabled by default,
even if the :kbd:`Land processor elimination` key is not included in the run description file.
If you have a reason to not use land processor elimination you can disable it with:

.. code-block:: yaml

    Land processor elimination: False


.. _NEMO-3.6-Paths:

:kbd:`paths` Section
====================

The :kbd:`paths` section of the run description file is a collection of directory paths that :program:`salishsea` uses to find files in other repos that it needs.

:kbd:`NEMO code config`
  The path to the :file:`CONFIG/` directory in the :ref:`NEMO-3.6-code-repo` clone
  where the NEMO configuration directories are to be found;
  e.g. :file:`$HOME/MEOPAR/NEMO-3.6-code/NEMOGCM/CONFIG/`.

  An absolute path is required because the path is used in both the current directory and the temporary run directory created in the :kbd:`runs directory`.
  The path may contain :kbd:`~` or :envvar:`$HOME` as alternative spellings of the user's home directory,
  and :envvar:`$USER` as an alternative spelling of the user's userid.

  This key may also be spelled :kbd:`NEMO-code-config` for backward compatibility.

:kbd:`XIOS`
  The path to the :ref:`XIOS-repo` clone where the XIOS executable for the run is to be found.

  This path may be either absolute or relative.
  The path may contain :kbd:`~` or :envvar:`$HOME` as alternative spellings of the user's home directory,
  and :envvar:`$USER` as an alternative spelling of the user's userid.

:kbd:`forcing`
  The path to the :ref:`NEMO-forcing-repo` clone where the netCDF files for the grid coordinates,
  bathymetry,
  initial conditions,
  open boundary conditions,
  etc. are to be found.

  This path may be relative or absolute,
  and may contain :kbd:`~` or :envvar:`$HOME` as alternative spellings of the user's home directory,
  and :envvar:`$USER` as an alternative spelling of the user's userid.

:kbd:`runs directory`
  The path to the directory where run directories will be created by the :command:`salishsea run` (or :command:`salishsea prepare`) sub-command.
  This path may be either absolute or relative.


.. _NEMO-3.6-Grid:

:kbd:`grid` Section
===================

The :kbd:`grid` section of the run description file contains 2 key-value pairs that provide:

* the names of the coordinates and bathymetry files to use for the run, or,
* relative paths to the coordinates and bathymetry files to use for the run, or,
* absolute paths to the coordinates and bathymetry files to use for the run

If file names are provided,
those files are presumed to be in the :file:`grid/` sub-directory of the directory tree pointed to by the :kbd:`forcing` key in the :ref:`NEMO-3.6-Paths`.

If relative paths are given,
they are appended to the :file:`grid/` directory of the :kbd:`forcing` path.

Relative or absolute paths may contain :kbd:`~` or :envvar:`$HOME` as alternative spellings of the user's home directory,
and :envvar:`$USER` as an alternative spelling of the user's userid.

:kbd:`coordinates`
  The name of,
  or path to,
  the coordinates file to use for the run.
  It is symlinked in the run directory as :file:`coordinates.nc`
  (the file name required by NEMO).

:kbd:`bathymetry`
  The name of,
  or path to,
  the bathymetry file to use for the run
  It is symlinked in the run directory as :file:`bathy_meter.nc`
  (the file name required by NEMO).


.. _NEMO-3.6-Forcing:

:kbd:`forcing` Section
======================

The :kbd:`forcing` section of the run description file contains sub-sections that provide the names of directories and files that are to be symlinked in the run directory for NEMO to use to read initial conditions and forcing values from.

An example :kbd:`forcing` section:

.. code-block:: yaml

    forcing:
      NEMO-atmos:
        link to: /results/forcing/atmospheric/GEM2.5/operational/
      open_boundaries:
        link to: open_boundaries/
      rivers:
        link to: rivers/

The sub-section keys
(:kbd:`NEMO-atmos`,
:kbd:`open_boundaries`,
and :kbd:`rivers` above)
are the names of the symlinks that will be created in the run directory.
Those names are expected to appear in the appropriate places in the namelists.
The values associated with the :kbd:`link to` keys are the targets of the symlinks that will be created in the run directory.

The paths may be relative or absolute,
and may contain :kbd:`~` or :envvar:`$HOME` as alternative spellings of the user's home directory,
and :envvar:`$USER` as an alternative spelling of the user's userid.

If relative paths are given,
they are appended to the :kbd:`forcing` path given in the :ref:`NEMO-3.6-Paths`.

To provide links to directories containing initial fields for a run to use,
include a sub-section like:

.. code-block:: yaml

    forcing:
      ...
      initial_strat:
        link to: initial_strat/
      initial_green:
        link to: initial_green/

You are free to use any keys that you wish with the understanding that the key will be the name of the symlink that will be created in the run directory,
and that name will also need to appear as a directory name in the appropriate namelist.

The :command:`salishsea run` and :command:`salishsea prepare` commands and the :py:func:`salishsea_cmd.api.prepare` API function confirm that the targets of the symlinks exist,
and exit with an error message if not.


Atmospheric Forcing File Checks
-------------------------------

Additional checking can be performed on the files in the atmospheric forcing directory.
That checking confirms the existence of all of the atmospheric forcing files for the date range of the run.
Doing so ensures that a run won't fail part way through due to a missing atmospheric forcing file.
To enable the additional checking add a :kbd:`check link` section at the same level as the :kbd:`link to` key:

.. code-block:: yaml

    forcing:
      NEMO-atmos:
        link to: /results/forcing/atmospheric/GEM2.5/operational/
        check link:
          type: atmospheric
          namelist filename: namelist_cfg

The :kbd:`type` key provides the type of checking to perform on the link.
The value associated with the :kbd:`namelist filename` key is the name of the namelist file in which the atmospheric forcing link is used.

Link checking can be disabled by excluding the :kbd:`check link` section,
or by setting the value associated with the :kbd:`type` key to :py:obj:`None`.


.. _NEMO-3.6-Restart:

:kbd:`restart` Section
======================

The optional :kbd:`restart` section of the run description file contains key-value pairs that provide paths and file names of restart files to be used to initialize the run.

The paths may be relative or absolute,
and may contain :kbd:`~` or :envvar:`$HOME` as alternative spellings of the user's home directory,
and :envvar:`$USER` as an alternative spelling of the user's userid.

If relative paths are given,
they are appended to the directory containing the run description file.

Here is an example :kbd:`restart` section:

.. code-block:: yaml

    restart:
      restart.nc: /results/SalishSea/nowcast/SalishSea_00475200_restart.nc
      restart_trc.nc: /results/SalishSea/nowcast-green/06dec15/SalishSea_00004320_restart_trc.nc

NEMO requires that the name of the model restart file be :kbd:`restart.nc`,
so that is the key that you must use.
For an (optional) tracers restart file the required file name (key) is :kbd:`restart_trc.nc`.

The restart section is optional because it is not required for runs that are initialized with fields provided in a directory linked in the :ref:`NEMO-3.6-Forcing`.

The :command:`salishsea run` and :command:`salishsea prepare` commands and the :py:func:`salishsea_cmd.api.prepare` API function confirm that the targets of the symlinks exist,
and exit with an error message if not.


.. _NEMO-3.6-Namelists:

:kbd:`namelists` Section
========================

The :kbd:`namelists` section of the run description file contains a dict of lists of NEMO namelist section files that will be concatenated to construct :file:`namelist*_cfg` files
(the file names required by NEMO)
file for the run.

The paths may be relative or absolute,
and may contain :kbd:`~` or :envvar:`$HOME` as alternative spellings of the user's home directory,
and :envvar:`$USER` as an alternative spelling of the user's userid.

If relative paths are given,
they are appended to the directory containing the run description file.

Here is an example :kbd:`namelist` section:

.. code-block:: yaml

    namelists:
      namelist_cfg:
        - namelist.time
        - namelist.domain
        - namelist.surface
        - namelist.lateral
        - namelist.bottom
        - namelist.tracer
        - namelist.dynamics
        - namelist.vertical
        - namelist.compute
      namelist_top_cfg:
        - namelist_top_cfg
      namelist_pisces_cfg:
        - namelist_pisces_cfg

A :kbd:`namelist_cfg` key must be present,
other :kbd:`namelist*_cfg` keys are optional.
Each :kbd:`namelist*_cfg` section must be a list containing at least 1 namelist section file.

Namelist sections that are specific to the run such as :file:`namelist.time` where the starting and ending timesteps and the restart configuration are defined are typically stored in the same directory as the run description file.
That mean that they are simply listed by name in the appropriate :kbd:`namelist*_cfg` section:

.. code-block:: yaml

    namelists:
      namelist_cfg:
        - namelist.time

On the other hand,
when you want to use a namelist section that contains the group's current consensus best values,
list it as a relative or absolute path from the location of your run description file to the "standard" nameslist section files in :file:`SS-run-sets/SalishSea/nemo3.6/`:

.. code-block:: yaml

    namelists:
      namelist_cfg:
        - ../../nemo3.6/namelist.bottom

For each :kbd:`namelist*_cfg` key a :file:`NEMOGCM/CONFIG/config_name/EXP00/namelist*_ref` file is symlinked into the run directory to provide default values that will be used for any namelist variables not included in the namelist section files listed in the :kbd:`namelists` section.
:kbd:`config_name` is the value of the :kbd:`config name` key in the run description file.

So,
:file:`NEMOGCM/CONFIG/config_name/EXP00/namelist_ref` will always be symlinked and,
if the :kbd:`namelist_top_cfg` key is present,
the :file:`NEMOGCM/CONFIG/config_name/EXP00/namelist_top_ref` file will also be symlinked into the run directory.

You can override the use of :file:`*_ref` namelists from :file:`CONFIG/config_name/EXP00/` by including a :file:`*_ref` namelist key.
For example:

.. code-block:: yaml

    config name: SMELT

    ...

    namelists:
      namelist_ref:
        - $HOME/MEOPAR/test-sponge/namelist_ref

will cause the :file:`namelist_ref` file in the :file:`$HOME/MEOPAR/test-sponge/namelist_ref` directory to be symlinked into the temporary run directory instead of :file:`CONFIG/SMELT/EXP00/namelist_ref`.


.. _NEMO-3.6-Output:

:kbd:`output` Section
=====================

The :kbd:`output` section of the run description file contains key-value pairs that provide the names of the files that define the output files,
domains,
and fields to be used by the XIOS server for the run.

The paths may be relative or absolute,
and may contain :kbd:`~` or :envvar:`$HOME` as alternative spellings of the user's home directory,
and :envvar:`$USER` as an alternative spelling of the user's userid.

If relative paths are given,
they are appended to the directory containing the run description file.

:kbd:`iodefs`
  The path and name of the :file:`iodef.xml` output files definitions file to use for the run.
  It is copied into the run directory as :file:`iodef.xml`
  (the file name required by XIOS).
  The value is typically either:

  * a relative or absolute run-specific output files definitions file
  * a relative or absolute path to :file:`SS-run-sets/SalishSea/nemo3.6/iodef.xml`

  This key may also be spelled :kbd:`files` for backward compatibility.

:kbd:`domaindefs`
  The path and name of the :file:`domain_def.xml` output domains definitions file to use for the run.
  It is copied into the run directory as :file:`domain_def.xml`
  (the file name required by XIOS).
  The value is typically either:

  * a relative or absolute path to :file:`SS-run-sets/SalishSea/nemo3.6/domain_def.xml`
  * a relative or absolute run-specific output domains definitions file

  This key may also be spelled :kbd:`domain` for backward compatibility.

:kbd:`fielddefs`
  The path and name of the :file:`field_def.xml` output fields definitions file to use for the run.
  It is copied into the run directory as :file:`field_def.xml`
  (the file name required by XIOS).
  The value is typically a relative or absolute path to :file:`NEMO-3.6-code/NEMOGCM/CONFIG/SHARED/field_def.xml`.

  This key may also be spelled :kbd:`fields` for backward compatibility.

:kbd:`filedefs` (optional)
  The path and name of the :file:`file_def.xml` output domains definitions file to use for the run.
  This item is optional because it is only used by XIOS-2
  (but it is required by XIOS-2).
  It is copied into the run directory as :file:`file_def.xml`
  (the file name required by XIOS-2).
  The value is typically either:

  * a relative or absolute run-specific output domains definitions file
  * a relative or absolute path to :file:`SS-run-sets/SalishSea/nemo3.6/file_def.xml`

The :kbd:`output` section also contains key-value pairs that control how the XIOS server is run and,
in the case where it is run as a separate server,
the number of XIOS servers to run.

:kbd:`separate XIOS server`
  Boolean flag indicating whether the XIOS server should be run on separate processors from NEMO (:py:obj:`True`),
  or in attached mode on every NEMO processor (:py:obj:`False`).
  The :command:`salishsea prepare` command sets the value of the :kbd:`using_server` variable in the :kbd:`xios` context in the copy of the :file:`iodef.xml` file in the temporary run directory to reflect the :kbd:`separate XIOS server` value.

:kbd:`XIOS server`
  The number of XIOS servers to run when the value of :kbd:`separate XIOS server` it :py:obj:`True`.
  The number of XIOS servers is added to the number of NEMO processors calculated from the :kbd:`MPI decomposition` value to specify the total number of processors requested in the :kbd:`#PBS` directives section of the :file:`SalishSeaNEMO.sh` script generated by the :command:`salishsea run` command.


.. _NEMO-3.6-VCS-Revisions:

:kbd:`vcs revisions` Section
============================

The optional :kbd:`vcs revisions` section of the run description file contains lists of version control system repositories of which the revision and status will be recorded in the temporary run and run results directories.

.. note::
    Revision and status record files for the :file:`NEMO-3.6-code`,
    :file:`XIOS`,
    and :file:`NEMO-forcing` Mercurial repositories listed in the :ref:`NEMO-3.6-Paths` section are always generated,
    so those repository paths should not be included in the :kbd:`vcs revisions` section.

An example :kbd:`vcs revisions` section:

.. code-block:: yaml

    vcs revisions:
      hg:
        - $HOME/MEOPAR/SS-run-sets

The sub-section keys
(:kbd:`hg` above)
are the names of the version control tools to use for the repositories listed below them.
At present only Mercurial
(:kbd:`hg`)
is supported.

The paths listed under the version control tool key are the repositories of which the revision and status will be recorded.

The repository paths may be relative or absolute,
and may contain :kbd:`~` or :envvar:`$HOME` as alternative spellings of the user's home directory,
and :envvar:`$USER` as an alternative spelling of the user's userid.

For each repository,
a file will be created in the temporary run directory.
The file names are the repository directory names with :kbd:`_rev.txt` appended.
So,
from the example above,
the files created will be::

  SS-run-sets_rev.txt

Each file will contain the output of the :command:`hg parents -v` command for the repository.
That is a record of the last committed revision of the repository that will be in effect for the run.
For example,
:file:`SS-run-sets_rev.txt` might contain::

  changset:   950:0ba6750ce999d28c5a3f48a415febb692ba49b86
  tag:        tip
  user:       Doug Latornell <djl@douglatornell.ca>
  date:       Tue Jan 31 14:14:50 2017 -05:00
  files:      SalishSea/SalishSea.yaml SalishSea/nemo3.6/SalishSea.yaml SalishSea/nemo3.6/SalishSea_orcinus.yaml SalishSea/nemo3.6/nowcast-like/SalishSea_nowcast_green.yaml SalishSea/nemo3.6/nowcast-like/SalishSea_nowcast_green_orcinus.yaml
  description:
  Add 'NEMO code config' key to selected run description YAML files.

If any of the listed repositories contain uncommitted changes,
the :command:`nemo prepare` command will generate a warning message like::

  nemo_cmd.prepare WARNING: There are uncommitted changes in $HOME/MEOPAR/SS-run-sets/

and the list of uncommitted changes and their status codes,
the output of the :command:`hg status -mardC` command,
will be appended to the :file:`_rev.txt` file.
